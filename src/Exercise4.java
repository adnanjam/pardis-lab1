public class Exercise4 {
    /**
     * More complex constructions
     * In the producer-consumer problem we have a producer thread wishing to pass data to a consumer thread using a shared, fixed-size buffer. Implement a ProducerConsumer class using synchronized, wait(), and notify() in Java, and use it to pass a sequence of integer values from one thread (the producer) to a second that prints them (the consumer).
     * A (counting) semaphore is a shared variable with two atomic operations signal() and wait(). Semaphores are used to govern access to some shared resource. A positive value n of the semaphore indicates that there are n amounts of resource available. signal() increments the value of the semaphore by 1 to indicate that a resource has been made available. This causes a waiting thread to be activated, if at time of calling signal() the value of the semaphore was positive. wait() decrements the value of the semaphore by 1. If the value of the semaphore is now negative, the calling thread is suspended. Implement a counting semaphore using synchronized(), wait(), and notify() in Java, and test it on a suitably simple example..
     * In the Dining Philosophers Problem there are five philosophers sitting around a round table, as shown in the figure below. Each philosopher has a plate and a chopstick shared with the left- and right hand neighbour. Each philosopher alternately thinks and eats. To eat, a philosopher obviously needs two chopsticks. Using some of the mechanisms introduced in the lab, implement a solution to the Dining Philosophers Problem that ensures that each philosopher who some time tries to eat eventually does so. Your solution should work for an arbitrary number of philosophers. The solution should be deadlock-free, i.e. not be able to reach a configuration that cannot progress, and starvation-free, i.e. in any infinite run, all philosophers get to eat infinitely often. Argue carefully why your solution meets these requirements. [See also exercise 1 in Herlihy and Shavit. There are a number of solutions to this problem on the web and in textbooks. Try to come up with a solution on your own, and declare if you have resorted to an external source for input.]
     */
}
